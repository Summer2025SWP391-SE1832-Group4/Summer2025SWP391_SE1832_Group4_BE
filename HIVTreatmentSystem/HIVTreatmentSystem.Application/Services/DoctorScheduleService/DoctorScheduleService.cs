using HIVTreatmentSystem.Application.Interfaces;
using HIVTreatmentSystem.Application.Models.DoctorSchedule;
using HIVTreatmentSystem.Domain.Entities;
using HIVTreatmentSystem.Domain.Interfaces;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace HIVTreatmentSystem.Application.Services
{
    /// <summary>
    /// Service implementation for managing doctor schedules.
    /// </summary>
    public class DoctorScheduleService : IDoctorScheduleService
    {
        private readonly IDoctorScheduleRepository _repo;

        public DoctorScheduleService(IDoctorScheduleRepository repo)
        {
            _repo = repo;
        }

        public async Task<IEnumerable<DoctorScheduleDto>> GetByDoctorIdAsync(int doctorId)
        {
            var list = await _repo.GetByDoctorIdAsync(doctorId);
            return list.Select(x => ToDto(x));
        }

        public async Task<IEnumerable<DoctorScheduleDto>> GetByDoctorNameAsync(string doctorName)
        {
            var list = await _repo.GetByDoctorNameAsync(doctorName);
            return list.Select(x => ToDto(x));
        }

        public async Task<DoctorScheduleDto> GetByIdAsync(int id)
        {
            var x = await _repo.GetByIdAsync(id);
            return x == null ? null : ToDto(x);
        }

        public async Task<DoctorScheduleDto> CreateAsync(DoctorScheduleDto dto)
        {
            var entity = ToEntity(dto);
            await _repo.AddAsync(entity);
            // After saving, entity.ScheduleId will be set by the database
            return ToDto(entity);
        }

        public async Task<DoctorScheduleDto> UpdateAsync(int id, DoctorScheduleDto dto)
        {
            var entity = await _repo.GetByIdAsync(id);
            if (entity == null) return null;
            entity.DayOfWeek = dto.DayOfWeek;
            entity.StartTime = dto.StartTime;
            entity.EndTime = dto.EndTime;
            entity.AvailabilityStatus = (Domain.Enums.ScheduleAvailability)dto.AvailabilityStatus;
            entity.EffectiveFrom = dto.EffectiveFrom;
            entity.EffectiveTo = dto.EffectiveTo;
            entity.SlotDurationMinutes = dto.SlotDurationMinutes;
            entity.Notes = dto.Notes;
            _repo.Update(entity);
            return ToDto(entity);
        }

        public async Task<bool> DeleteAsync(int id)
        {
            var entity = await _repo.GetByIdAsync(id);
            if (entity == null) return false;
            _repo.Remove(entity);
            return true;
        }

        private DoctorScheduleDto ToDto(DoctorSchedule x) => new DoctorScheduleDto
        {
            // ScheduleId is not included in the DTO anymore
            DoctorId = x.DoctorId,
            DayOfWeek = x.DayOfWeek,
            StartTime = x.StartTime,
            EndTime = x.EndTime,
            AvailabilityStatus = (int)x.AvailabilityStatus,
            EffectiveFrom = x.EffectiveFrom,
            EffectiveTo = x.EffectiveTo,
            SlotDurationMinutes = x.SlotDurationMinutes,
            Notes = x.Notes
        };

        private DoctorSchedule ToEntity(DoctorScheduleDto dto) => new DoctorSchedule
        {
            // ScheduleId is not set here, it will be generated by the database
            DoctorId = dto.DoctorId,
            DayOfWeek = dto.DayOfWeek,
            StartTime = dto.StartTime,
            EndTime = dto.EndTime,
            AvailabilityStatus = (Domain.Enums.ScheduleAvailability)dto.AvailabilityStatus,
            EffectiveFrom = dto.EffectiveFrom,
            EffectiveTo = dto.EffectiveTo,
            SlotDurationMinutes = dto.SlotDurationMinutes,
            Notes = dto.Notes
        };
    }
} 