// <auto-generated />
using System;
using HIVTreatmentSystem.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIVTreatmentSystem.Infrastructure.Migrations
{
    [DbContext(typeof(HIVDbContext))]
    partial class HIVDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppointmentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymousConsultation")
                        .HasColumnType("bit");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Blog", b =>
                {
                    b.Property<int>("BlogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogId"));

                    b.Property<int>("BlogTagId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BlogId");

                    b.HasIndex("BlogTagId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.BlogTag", b =>
                {
                    b.Property<int>("BlogTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BlogTagId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BlogTagId");

                    b.ToTable("BlogTags");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CertificateId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Qualifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Specialty")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.DoctorSchedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SlotDurationMinutes")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("ScheduleId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorSchedules", t =>
                        {
                            t.HasCheckConstraint("CK_DoctorSchedule_DayOfWeek", "DayOfWeek BETWEEN 1 AND 7");

                            t.HasCheckConstraint("CK_DoctorSchedule_TimeValidation", "EndTime > StartTime");
                        });
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.EducationalMaterial", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("MaterialType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("TargetAudience")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("MaterialId");

                    b.HasIndex("AuthorId");

                    b.ToTable("EducationalMaterials");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.ExperienceWorking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ExperienceWorkings");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("CoinfectionDiseases")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ConsultationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("DoctorNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrugAllergyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextSteps")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Symptoms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("AnonymousIdentifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsentInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HivDiagnosisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientCodeAtFacility")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientId");

                    b.HasIndex("AnonymousIdentifier")
                        .IsUnique()
                        .HasFilter("[AnonymousIdentifier] IS NOT NULL");

                    b.HasIndex("PatientCodeAtFacility")
                        .IsUnique()
                        .HasFilter("[PatientCodeAtFacility] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.PatientTreatment", b =>
                {
                    b.Property<int>("PatientTreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTreatmentId"));

                    b.Property<string>("ActualDosage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("PrescribingDoctorId")
                        .HasColumnType("int");

                    b.Property<string>("ReasonForChangeOrStop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegimenAdjustments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegimenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientTreatmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrescribingDoctorId");

                    b.HasIndex("RegimenId");

                    b.ToTable("PatientTreatments");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Reminder", b =>
                {
                    b.Property<int>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReminderId"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Frequency")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientTreatmentId")
                        .HasColumnType("int");

                    b.Property<string>("ReminderContent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("ReminderDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReminderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReminderId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PatientTreatmentId");

                    b.ToTable("Reminders", t =>
                        {
                            t.HasCheckConstraint("CK_Reminder_TreatmentOrAppointment", "(ReminderType = 'TakeMedication' AND PatientTreatmentId IS NOT NULL AND AppointmentId IS NULL) OR (ReminderType = 'FollowUpAppointment' AND AppointmentId IS NOT NULL AND PatientTreatmentId IS NULL)");
                        });
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "System Administrator",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Healthcare Facility Manager",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Medical Doctor",
                            RoleName = "Doctor"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Healthcare Staff (Receptionist, Nurse, etc.)",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Patient/Client",
                            RoleName = "Patient"
                        });
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StaffId");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.StandardARVRegimen", b =>
                {
                    b.Property<int>("RegimenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegimenId"));

                    b.Property<string>("CommonSideEffects")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contraindications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegimenName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("StandardDosage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TargetPopulation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RegimenId");

                    b.HasIndex("RegimenName")
                        .IsUnique();

                    b.ToTable("StandardARVRegimens");

                    b.HasData(
                        new
                        {
                            RegimenId = 1,
                            CommonSideEffects = "Dizziness, abnormal dreams, rash, nausea",
                            Contraindications = "Severe renal impairment, psychiatric disorders",
                            DetailedDescription = "Tenofovir Disoproxil Fumarate + Lamivudine + Efavirenz",
                            RegimenName = "TDF + 3TC + EFV",
                            StandardDosage = "One tablet once daily",
                            TargetPopulation = "First-line treatment for adults"
                        },
                        new
                        {
                            RegimenId = 2,
                            CommonSideEffects = "Headache, insomnia, fatigue",
                            Contraindications = "HLA-B*5701 positive patients",
                            DetailedDescription = "Abacavir + Lamivudine + Dolutegravir",
                            RegimenName = "ABC + 3TC + DTG",
                            StandardDosage = "One tablet once daily",
                            TargetPopulation = "Alternative first-line treatment"
                        },
                        new
                        {
                            RegimenId = 3,
                            CommonSideEffects = "Nausea, diarrhea, lipodystrophy",
                            Contraindications = "Severe anemia, neutropenia",
                            DetailedDescription = "Zidovudine + Lamivudine + Lopinavir/ritonavir",
                            RegimenName = "AZT + 3TC + LPV/r",
                            StandardDosage = "Twice daily dosing",
                            TargetPopulation = "Second-line treatment"
                        });
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.SystemAuditLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogId"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ActionDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffectedEntity")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AffectedEntityId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("RoleAtTimeOfAction")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LogId");

                    b.HasIndex("AccountId");

                    b.ToTable("SystemAuditLogs");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.TestResult", b =>
                {
                    b.Property<int>("TestResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestResultId"));

                    b.Property<string>("AttachedFileUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CD4Count")
                        .HasColumnType("int");

                    b.Property<string>("CD4Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("cells/mm³");

                    b.Property<string>("DoctorComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HivViralLoadUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("copies/mL");

                    b.Property<string>("HivViralLoadValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LabName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TestType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestResultId");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Account", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Account", "CreatedByUser")
                        .WithMany("CreatedAppointments")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Blog", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.BlogTag", "BlogTag")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogTagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BlogTag");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Certificates")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Account", "Account")
                        .WithOne("Doctor")
                        .HasForeignKey("HIVTreatmentSystem.Domain.Entities.Doctor", "DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.DoctorSchedule", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Schedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.EducationalMaterial", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Account", "Author")
                        .WithMany("AuthoredMaterials")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.ExperienceWorking", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("ExperienceWorkings")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Feedback", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Appointment", "Appointment")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("HIVTreatmentSystem.Domain.Entities.MedicalRecord", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Patient", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Account", "Account")
                        .WithOne("Patient")
                        .HasForeignKey("HIVTreatmentSystem.Domain.Entities.Patient", "PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.PatientTreatment", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Treatments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Doctor", "PrescribingDoctor")
                        .WithMany("PrescribedTreatments")
                        .HasForeignKey("PrescribingDoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.StandardARVRegimen", "Regimen")
                        .WithMany("PatientTreatments")
                        .HasForeignKey("RegimenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PrescribingDoctor");

                    b.Navigation("Regimen");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Appointment", "Appointment")
                        .WithMany("Reminders")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Reminders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.PatientTreatment", "PatientTreatment")
                        .WithMany("Reminders")
                        .HasForeignKey("PatientTreatmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("PatientTreatment");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Staff", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("HIVTreatmentSystem.Domain.Entities.Staff", "StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.SystemAuditLog", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Account", "Account")
                        .WithMany("AuditLogs")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("HIVTreatmentSystem.Domain.Entities.MedicalRecord", "MedicalRecord")
                        .WithMany("TestResults")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("HIVTreatmentSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("TestResults")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Account", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("AuthoredMaterials");

                    b.Navigation("CreatedAppointments");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("MedicalRecord");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.BlogTag", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Certificates");

                    b.Navigation("ExperienceWorkings");

                    b.Navigation("MedicalRecords");

                    b.Navigation("PrescribedTreatments");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.Navigation("TestResults");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Reminders");

                    b.Navigation("TestResults");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.PatientTreatment", b =>
                {
                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("HIVTreatmentSystem.Domain.Entities.StandardARVRegimen", b =>
                {
                    b.Navigation("PatientTreatments");
                });
#pragma warning restore 612, 618
        }
    }
}
